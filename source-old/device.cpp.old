#include <stdio.h>
#include "graphics.h"
#include "device.h"
#include "private.h"

/* summary */
static inline IAdapter* GetAdapter(AdapterPtr adapter)
{
	IAdapter *iadapter = NULL;
	if ((iadapter = (IAdapter*)adapter) != NULL)
	{
		return iadapter;
	}

	if ((DefaultAdapter((AdapterPtr*)&iadapter) == GI_SUCCESS))
	{
		return iadapter;
	}

	return NULL;
}

/* Sets the line width for a polyline or polygon. */
extern "C" int SetLineWidth(DevicePtr pContext, float value)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	IRasterstate state;
	if ((idevice->GetRasterstate(idevice, &state) != GI_SUCCESS))
		return GI_ERROR;

	state.line_width = value;
	idevice->SetRasterstate(idevice, &state);
	return GI_SUCCESS;
}

/* Sets the line width for a polyline or polygon. */
extern "C" int SetClipping(DevicePtr pContext, int enable)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	IRasterstate state;
	if ((idevice->GetRasterstate(idevice, &state) != GI_SUCCESS))
		return GI_ERROR;

	state.enable_clipping = (enable > 0 ? 1 : 0);
	idevice->SetRasterstate(idevice, &state);
	return GI_SUCCESS;
}

/* Set the world transformation for this Graphics context. */
extern "C" int SetTransform(DevicePtr pContext, Matrix4x4F *pMatrix)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((pMatrix == NULL))
		return GI_ERROR;

	if ((idevice->SetTransform == NULL))
		return GI_UNIMPLEMENTED;

	idevice->SetTransform(idevice, pMatrix);
	return GI_SUCCESS;
}

/* Get the world transformation for this Graphics context. */
extern "C" int GetTransform(DevicePtr pContext, Matrix4x4F *pMatrix)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((pMatrix == NULL))
		return GI_ERROR;

	if ((idevice->GetTransform == NULL))
		return GI_UNIMPLEMENTED;

	idevice->GetTransform(idevice, pMatrix);
	return GI_SUCCESS;
}

/* Resets the transformation matrix of this Graphics context to the identity matrix. */
extern "C" int ResetTransform(DevicePtr pContext)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->SetTransform == NULL))
		return GI_UNIMPLEMENTED;

	Matrix4x4F temp;
	MatrixIdentity(&temp);
	idevice->SetTransform(idevice, &temp);
	return GI_SUCCESS;
}

/* */
extern "C" int SetRenderTarget(DevicePtr pContext, SurfacePtr pSurface)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->SetRenderTarget == NULL))
		return GI_UNIMPLEMENTED;

	if ((idevice->SetRenderTarget(idevice, (ISurface*)pSurface) != GI_SUCCESS))
		return GI_ERROR;

	return GI_SUCCESS;
}

/* Clears one or more surfaces such as a render target. */
extern "C" int Clear(DevicePtr pContext, Color4F color)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->Clear == NULL))
		return GI_UNIMPLEMENTED;

	if ((idevice->Clear(idevice, color) != GI_SUCCESS))
		return GI_ERROR;

	return GI_SUCCESS;
}

/* Clears one or more surfaces such as a render target. */
extern "C" int FillRectangleWithColor(DevicePtr pContext, unsigned x, unsigned y, unsigned width, unsigned height, Color4F color)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->FillRectangleWithColor == NULL))
		return GI_UNIMPLEMENTED;

	if ((idevice->FillRectangleWithColor(idevice, x, y, width, height, color) != GI_SUCCESS))
		return GI_ERROR;

	return GI_SUCCESS;
}

extern "C" int DrawLine(DevicePtr pContext, Point2F a, Point2F b)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->DrawLine == NULL))
		return GI_UNIMPLEMENTED;

	if ((idevice->DrawLine(idevice, a, b) != GI_SUCCESS))
		return GI_ERROR;

	return GI_SUCCESS;
}

extern "C" int DrawRectangle(DevicePtr pContext, Rect4F bounds)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->DrawRectangle == NULL))
		return GI_UNIMPLEMENTED;

	if ((idevice->DrawRectangle(idevice, bounds) != GI_SUCCESS))
		return GI_ERROR;

	return GI_SUCCESS;
}

extern "C" int DrawImage(DevicePtr pContext, SurfacePtr pSurface, unsigned x, unsigned y, unsigned sx, unsigned sy, unsigned width, unsigned height)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->DrawImage == NULL))
		return GI_UNIMPLEMENTED;

	if ((idevice->DrawImage(idevice, (ISurface*)pSurface, x, y, sx, sy, width, height) != GI_SUCCESS))
		return GI_ERROR;

	return GI_SUCCESS;
}

/* Draws a specified image using its original physical size at a specified location. */
extern "C" int DrawImageUnscaled(DevicePtr pContext, SurfacePtr pSurface, unsigned x, unsigned y)
{
	ISurface *isurface;
	if ((isurface = (ISurface*)pSurface) == NULL)
	{
		return GI_ERROR;
	}

	DrawImage(pContext, pSurface, x, y, 0, 0, isurface->width, isurface->height);

	return GI_SUCCESS;
}

/* */
extern "C" int BitBlt(DevicePtr pContext, int dx, int dy, SurfacePtr pSurface, int sx, int sy, int width, int height)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->BitBlt == NULL))
		return GI_UNIMPLEMENTED;

	if ((idevice->BitBlt(idevice, dx, dy, (ISurface*)pSurface, sx, sy, width, height) != GI_SUCCESS))
		return GI_ERROR;

	return GI_SUCCESS;
}

/* Flush the graphics commands. */
extern "C" int Flush(DevicePtr pContext)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pContext) == NULL)
		return GI_ERROR;

	if ((idevice->Flush == NULL))
		return GI_UNIMPLEMENTED;

	idevice->Flush(idevice);
	return GI_SUCCESS;
}

/* Release a graphics context. */
extern "C" int ReleaseDevice(DevicePtr pDevice)
{
	IDevice *idevice;
	if ((idevice = (IDevice*)pDevice) == NULL)
	{
		return GI_ERROR;
	}

	if ((idevice->Release == NULL))
	{
		return GI_UNIMPLEMENTED;
	}

	return idevice->Release(idevice);
}

/* Creates a graphics device. */
int CreateDevice(AdapterPtr pAdapter, DevicePtr *ppDevice)
{
	IAdapter *iadapter;
	if ((iadapter = (IAdapter*)pAdapter) == NULL)
	{
		return GI_ERROR;
	}

	if ((iadapter->CreateDeviceContext == NULL))
	{
		return GI_UNIMPLEMENTED;
	}

	return 	iadapter->CreateDeviceContext(iadapter, (IDevice**)ppDevice);
}



